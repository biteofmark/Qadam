// –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
export class SystemScreenshotMonitor {
  private active = false;
  private suspicionLevel = 0;
  private callbacks: {
    onSuspiciousActivity: (reason: string, level: number) => void;
    onHighRisk: () => void;
  };

  constructor(callbacks: {
    onSuspiciousActivity: (reason: string, level: number) => void;
    onHighRisk: () => void;
  }) {
    this.callbacks = callbacks;
  }

  activate() {
    if (this.active) return;
    this.active = true;

    // 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
    this.monitorWindowFocus();
    
    // 2. –î–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞
    this.monitorClipboard();
    
    // 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏ (–¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º)
    this.monitorMouseActivity();
    
    // 4. –î–µ—Ç–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    this.monitorTemporaryFiles();
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—á–µ—Ä–µ–∑ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
    this.monitorSystemProcesses();

    console.log('üîí –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  }

  private monitorWindowFocus() {
    let focusLostTime: number | null = null;
    let rapidSwitches = 0;

    const handleVisibilityChange = () => {
      const now = Date.now();

      if (document.hidden) {
        focusLostTime = now;
        this.suspicionLevel += 1;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–Ω—è—é—Ç –µ–≥–æ)
        if (document.title !== document.title) {
          this.reportSuspiciousActivity('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞', 3);
        }
      } else {
        if (focusLostTime) {
          const timeAway = now - focusLostTime;
          
          // –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ (–º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥) - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
          if (timeAway < 2000) {
            rapidSwitches++;
            this.suspicionLevel += 2;
            
            if (rapidSwitches > 3) {
              this.reportSuspiciousActivity('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è', 5);
              rapidSwitches = 0;
            }
          }
          
          focusLostTime = null;
        }
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('focus', handleVisibilityChange);
    window.addEventListener('blur', handleVisibilityChange);
  }

  private monitorClipboard() {
    // –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–ø—ã—Ç–æ–∫ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    let lastClipboardLength = 0;

    const checkClipboard = async () => {
      try {
        if (navigator.clipboard && navigator.clipboard.readText) {
          const text = await navigator.clipboard.readText();
          
          if (text.length !== lastClipboardLength) {
            // –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±—É—Ñ–µ—Ä–µ - –≤–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç
            if (text.length === 0 && lastClipboardLength > 0) {
              this.reportSuspiciousActivity('–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞', 2);
            }
            lastClipboardLength = text.length;
          }
        }
      } catch (e) {
        // –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this.suspicionLevel += 1;
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(checkClipboard, 5000);

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏
    document.addEventListener('copy', () => {
      this.reportSuspiciousActivity('–ö–æ–º–∞–Ω–¥–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 1);
    });

    document.addEventListener('paste', () => {
      this.suspicionLevel += 0.5;
    });
  }

  private monitorMouseActivity() {
    let edgeMovements = 0;
    let cornerTime = 0;

    const handleMouseMove = (e: MouseEvent) => {
      const { clientX, clientY } = e;
      const { innerWidth, innerHeight } = window;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞ (–≥–¥–µ –æ–±—ã—á–Ω–æ –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
      const nearEdge = clientX < 100 || clientX > innerWidth - 100 || 
                      clientY < 100 || clientY > innerHeight - 100;
      
      if (nearEdge) {
        edgeMovements++;
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —É–≥–ª–∞–º —ç–∫—Ä–∞–Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        const nearCorner = (clientX < 50 || clientX > innerWidth - 50) &&
                          (clientY < 50 || clientY > innerHeight - 50);
        
        if (nearCorner) {
          cornerTime = Date.now();
          this.suspicionLevel += 2;
          
          // –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —É–≥–ª—É
          setTimeout(() => {
            if (Date.now() - cornerTime > 2000) {
              this.reportSuspiciousActivity('–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ —É–≥–ª—É', 3);
            }
          }, 2000);
        }
      } else {
        edgeMovements = Math.max(0, edgeMovements - 0.1);
      }

      // –ú–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π –∫ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞
      if (edgeMovements > 10) {
        this.reportSuspiciousActivity('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫ –∫—Ä–∞—è–º —ç–∫—Ä–∞–Ω–∞', 4);
        edgeMovements = 0;
      }
    };

    document.addEventListener('mousemove', handleMouseMove);
  }

  private monitorTemporaryFiles() {
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    // —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ LocalStorage/IndexedDB (–∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
    
    let lastStorageSize = localStorage.length;
    
    const checkStorage = () => {
      const currentSize = localStorage.length;
      
      if (currentSize !== lastStorageSize) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && (key.includes('screenshot') || key.includes('image') || 
                     key.includes('capture') || key.includes('snip'))) {
            this.reportSuspiciousActivity('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ LocalStorage', 4);
            break;
          }
        }
        lastStorageSize = currentSize;
      }
    };

    setInterval(checkStorage, 3000);
  }

  private monitorSystemProcesses() {
    // –î–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ navigator –æ–±—ä–µ–∫—Ç–µ
    const originalNavigator = { ...navigator };
    
    const checkNavigatorChanges = () => {
      const currentKeys = Object.keys(navigator);
      const originalKeys = Object.keys(originalNavigator);
      
      if (currentKeys.length !== originalKeys.length) {
        this.reportSuspiciousActivity('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ navigator', 3);
      }
    };

    setInterval(checkNavigatorChanges, 10000);

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ performance API
    let lastResourceCount = performance.getEntriesByType('resource').length;
    
    const checkPerformance = () => {
      const currentResourceCount = performance.getEntriesByType('resource').length;
      
      if (currentResourceCount > lastResourceCount + 5) {
        this.reportSuspiciousActivity('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 2);
      }
      
      lastResourceCount = currentResourceCount;
    };

    setInterval(checkPerformance, 5000);

    // –î–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ WebRTC (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–≥–æ)
    if (window.RTCPeerConnection) {
      const originalRTC = window.RTCPeerConnection;
      
      window.RTCPeerConnection = function(...args: any[]) {
        // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å RTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        this.reportSuspiciousActivity('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 4);
        return new originalRTC(...args);
      }.bind(this);
    }
  }

  private reportSuspiciousActivity(reason: string, severity: number) {
    this.suspicionLevel += severity;
    
    console.warn(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${reason}, —É—Ä–æ–≤–µ–Ω—å: ${this.suspicionLevel}`);
    
    this.callbacks.onSuspiciousActivity(reason, this.suspicionLevel);
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
    if (this.suspicionLevel > 15) {
      this.callbacks.onHighRisk();
      
      // –°–±—Ä–æ—Å –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
      setTimeout(() => {
        this.suspicionLevel = Math.max(5, this.suspicionLevel - 10);
      }, 30000);
    }

    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
    setTimeout(() => {
      this.suspicionLevel = Math.max(0, this.suspicionLevel - 1);
    }, 60000);
  }

  destroy() {
    this.active = false;
    console.log('üîì –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  }
}

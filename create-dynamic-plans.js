import 'dotenv/config';
import { db } from './server/db.ts';
import { subscriptionPlans, payments, userSubscriptions, blocks } from './shared/schema.ts';

async function createDynamicPlans() {
  try {
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await db.delete(payments);
    await db.delete(userSubscriptions);
    await db.delete(subscriptionPlans);
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const allBlocks = await db.select().from(blocks);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${allBlocks.length}`);
    
    const plans = [];
    
    // 1. –ü–ª–∞–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –±–ª–æ–∫—É)
    plans.push({
      name: '1 —Ç–µ—Å—Ç',
      description: '–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–µ—Å—Ç–∞',
      price: 50000, // 500 —Ç–µ–Ω–≥–µ
      currency: 'KZT',
      durationDays: 1,
      features: ['single_test', 'basic_results'],
      planType: 'single_test',
      blockId: null,
      isActive: true,
      sortOrder: 1
    });
    
    // 2. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
    allBlocks.forEach((block, index) => {
      plans.push({
        name: `${block.name} - 1 –º–µ—Å—è—Ü`,
        description: `–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–ª–æ–∫—É "${block.name}" –Ω–∞ –º–µ—Å—è—Ü`,
        price: 100000, // 1000 —Ç–µ–Ω–≥–µ
        currency: 'KZT', 
        durationDays: 30,
        features: ['block_access', 'unlimited_tests', 'progress_tracking', 'detailed_results'],
        planType: 'block_access',
        blockId: block.id,
        isActive: true,
        sortOrder: index + 2
      });
    });

    console.log('üå± –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã...');
    
    for (const plan of plans) {
      await db.insert(subscriptionPlans).values(plan);
      console.log(`‚úÖ –ü–ª–∞–Ω "${plan.name}" –¥–æ–±–∞–≤–ª–µ–Ω - ${plan.price/100} ${plan.currency}`);
    }
    
    console.log(`üéâ –°–æ–∑–¥–∞–Ω–æ ${plans.length} —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤!`);
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤:', error);
    process.exit(1);
  }
}

createDynamicPlans();
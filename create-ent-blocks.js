import 'dotenv/config';
import { db } from './server/db.ts';
import { blocks } from './shared/schema.ts';

async function createENTBlocks() {
  try {
    console.log('üìö –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –ï–ù–¢...');
    
    const entBlocks = [
      {
        name: '–§–∏–∑–∏–∫–∞+–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        description: '–§–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        order: 1
      },
      {
        name: '–•–∏–º–∏—è+–ë–∏–æ–ª–æ–≥–∏—è',
        description: '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        order: 2
      },
      {
        name: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è+–ò—Å—Ç–æ—Ä–∏—è',
        description: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ-–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        order: 3
      },
      {
        name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
        description: '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫',
        order: 4
      },
      {
        name: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
        description: '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        order: 5
      }
    ];

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –±–ª–æ–∫–∏ —É–∂–µ –µ—Å—Ç—å
    const existingBlocks = await db.select().from(blocks);
    console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤: ${existingBlocks.length}`);

    for (const block of entBlocks) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±–ª–æ–∫
      const exists = existingBlocks.find(b => b.name === block.name);
      if (!exists) {
        await db.insert(blocks).values(block);
        console.log(`‚úÖ –ë–ª–æ–∫ "${block.name}" —Å–æ–∑–¥–∞–Ω`);
      } else {
        console.log(`‚ö†Ô∏è –ë–ª–æ–∫ "${block.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    console.log('üéâ –í—Å–µ –±–ª–æ–∫–∏ –ï–ù–¢ –≥–æ—Ç–æ–≤—ã!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–∫–æ–≤:', error);
    process.exit(1);
  }
}

createENTBlocks();
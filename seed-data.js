import pkg from 'pg';
const { Pool } = pkg;
import { drizzle } from 'drizzle-orm/node-postgres';
import { blocks, variants, subjects, questions, answers } from './shared/schema.js';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

const db = drizzle(pool);

async function seed() {
  try {
    console.log('üå± Starting seed...');

    // 1. –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ "–ï–ù–¢ 2025"
    const [block] = await db.insert(blocks).values({
      name: '–ï–ù–¢ 2025',
      hasCalculator: true,
      hasPeriodicTable: true
    }).returning();
    console.log('‚úÖ Block created:', block.name);

    // 2. –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "–í–∞—Ä–∏–∞–Ω—Ç 1" (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    const [variant] = await db.insert(variants).values({
      blockId: block.id,
      name: '–í–∞—Ä–∏–∞–Ω—Ç 1',
      isFree: true,
      duration: 180, // 3 —á–∞—Å–∞
      questionsPerSubject: 5
    }).returning();
    console.log('‚úÖ Variant created:', variant.name);

    // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    const subjectsList = [
      { name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', order: 1 },
      { name: '–§–∏–∑–∏–∫–∞', order: 2 },
      { name: '–•–∏–º–∏—è', order: 3 }
    ];

    const createdSubjects = [];
    for (const subj of subjectsList) {
      const [subject] = await db.insert(subjects).values({
        blockId: block.id,
        name: subj.name,
        order: subj.order
      }).returning();
      createdSubjects.push(subject);
      console.log('‚úÖ Subject created:', subject.name);
    }

    // 4. –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    for (const subject of createdSubjects) {
      for (let i = 1; i <= 5; i++) {
        const [question] = await db.insert(questions).values({
          variantId: variant.id,
          subjectId: subject.id,
          questionNumber: i,
          questionText: `${subject.name} - –í–æ–ø—Ä–æ—Å ${i}`,
          questionType: 'single'
        }).returning();

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        const answerOptions = ['A', 'B', 'C', 'D', 'E'];
        for (let j = 0; j < 5; j++) {
          await db.insert(answers).values({
            questionId: question.id,
            answerText: `–û—Ç–≤–µ—Ç ${answerOptions[j]}`,
            isCorrect: j === 0 // –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
          });
        }
        
        console.log(`‚úÖ Question created: ${subject.name} Q${i}`);
      }
    }

    console.log('\nüéâ Seed completed successfully!');
    console.log(`Created:
    - 1 block (–ï–ù–¢ 2025)
    - 1 variant (–í–∞—Ä–∏–∞–Ω—Ç 1)
    - ${createdSubjects.length} subjects
    - ${createdSubjects.length * 5} questions
    - ${createdSubjects.length * 5 * 5} answers
    `);

  } catch (error) {
    console.error('‚ùå Seed failed:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

seed();
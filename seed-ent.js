import { config } from 'dotenv';
config();

import pkg from 'pg';
const { Pool } = pkg;
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from './shared/schema.ts';

const pool = new Pool({
    connectionString: process.env.DATABASE_URL
});

const db = drizzle(pool, { schema });

async function seedENTData() {
    try {
        console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ï–ù–¢ (–§–∏–∑–∏–∫–∞-–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞)...');

        // 1. –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –ï–ù–¢
        const entBlock = await db.insert(schema.blocks).values({
            name: '–ï–ù–¢ –§–∏–∑–∏–∫–∞-–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            hasCalculator: true
        }).returning();

        console.log('‚úÖ –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω:', entBlock[0].name);

        // 2. –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∞
        const entVariant = await db.insert(schema.variants).values({
            blockId: entBlock[0].id,
            name: '–ï–ù–¢ 2024 - –§–∏–∑–∏–∫–∞/–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            isFree: true
        }).returning();

        console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω');

        // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã (120 –≤–æ–ø—Ä–æ—Å–æ–≤)
        const subjects = await db.insert(schema.subjects).values([
            { variantId: entVariant[0].id, name: '–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞' },
            { variantId: entVariant[0].id, name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å' },
            { variantId: entVariant[0].id, name: '–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è' },
            { variantId: entVariant[0].id, name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' },
            { variantId: entVariant[0].id, name: '–§–∏–∑–∏–∫–∞' }
        ]).returning();

        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

        // 4. –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const questionsData = [];

        // –ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ - 20 –≤–æ–ø—Ä–æ—Å–æ–≤
        for (let i = 1; i <= 20; i++) {
            questionsData.push({
                subjectId: subjects[0].id,
                text: `–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –≤–æ–ø—Ä–æ—Å ${i}: –ö–æ–≥–¥–∞ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ö?`
            });
        }

        // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å - 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        for (let i = 1; i <= 10; i++) {
            questionsData.push({
                subjectId: subjects[1].id,
                text: `–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å ${i}: –†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 15`
            });
        }

        // –ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è - 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        for (let i = 1; i <= 10; i++) {
            questionsData.push({
                subjectId: subjects[2].id,
                text: `–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å ${i}: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å`
            });
        }

        // –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 40 –≤–æ–ø—Ä–æ—Å–æ–≤
        for (let i = 1; i <= 40; i++) {
            questionsData.push({
                subjectId: subjects[3].id,
                text: `–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å ${i}: –ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = x¬≤ + 3x`
            });
        }

        // –§–∏–∑–∏–∫–∞ - 40 –≤–æ–ø—Ä–æ—Å–æ–≤
        for (let i = 1; i <= 40; i++) {
            questionsData.push({
                subjectId: subjects[4].id,
                text: `–§–∏–∑–∏–∫–∞ –≤–æ–ø—Ä–æ—Å ${i}: –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–∏–ª—É —Ç—è–∂–µ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤—É—é—â—É—é –Ω–∞ —Ç–µ–ª–æ –º–∞—Å—Å–æ–π 10–∫–≥`
            });
        }

        const questions = await db.insert(schema.questions).values(questionsData).returning();
        console.log(`‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–æ–∑–¥–∞–Ω—ã: ${questions.length} –≤—Å–µ–≥–æ`);

        // 5. –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–ø–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
        const answersData = [];
        
        questions.forEach((question, index) => {
            const subjectIndex = Math.floor(index / 20); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤–æ–ø—Ä–æ—Å–∞
            
            // –°–æ–∑–¥–∞–µ–º 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            for (let j = 1; j <= 4; j++) {
                answersData.push({
                    questionId: question.id,
                    text: `–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ${j} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${index + 1}`,
                    isCorrect: j === 1 // –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                });
            }
        });

        await db.insert(schema.answers).values(answersData);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: ${answersData.length} –≤—Å–µ–≥–æ`);

        // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUser = await db.insert(schema.users).values({
            username: 'student2024',
            email: 'student@ent.kz',
            password: 'ent_password_2024'
        }).returning();

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser[0].username);

        console.log('üéâ –î–∞–Ω–Ω—ã–µ –ï–ù–¢ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log('   - –ë–ª–æ–∫–æ–≤: 1');
        console.log('   - –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: 1');
        console.log('   - –ü—Ä–µ–¥–º–µ—Ç–æ–≤: 5');
        console.log('   - –í–æ–ø—Ä–æ—Å–æ–≤: 120');
        console.log('   - –û—Ç–≤–µ—Ç–æ–≤: 480');
        
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

seedENTData();